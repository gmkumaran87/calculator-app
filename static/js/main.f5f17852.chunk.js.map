{"version":3,"sources":["App.js","Buttons.js","reportWebVitals.js","index.js"],"names":["App","initialState","prevNumber","currNumber","operations","isComplete","expression","useState","state","setstate","numbers","id","value","handleClick","e","btnValue","target","dataset","newNumber","prevState","isNaN","Number","newExp","lastOperandEquals","length","split","includes","prev","operands","operandsAlone","replace","slice","every","el","console","log","newOperand","trim","filter","test","join","calc","eval","toFixed","obj","className","map","item","index","Buttons","props","classNames","type","data-value","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5f17852.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./Buttons\";\n\nfunction App() {\n  const initialState = {\n    prevNumber: \"\",\n    currNumber: \"0\",\n    operations: \"\",\n    isComplete: false,\n    expression: \"\",\n  };\n  const [state, setstate] = useState(initialState);\n\n  const numbers = [\n    { id: \"seven\", value: 7 },\n    { id: \"eight\", value: 8 },\n    { id: \"nine\", value: 9 },\n    { id: \"delete\", value: \"DEL\" },\n    { id: \"four\", value: 4 },\n    { id: \"five\", value: 5 },\n    { id: \"six\", value: 6 },\n    { id: \"add\", value: \"+\" },\n    { id: \"one\", value: 1 },\n    { id: \"two\", value: 2 },\n    { id: \"three\", value: 3 },\n    { id: \"subtract\", value: \"-\" },\n    { id: \"zero\", value: 0 },\n    { id: \"decimal\", value: \".\" },\n    { id: \"divide\", value: \"/\" },\n    { id: \"multiply\", value: \"*\" },\n    { id: \"equals\", value: \"=\" },\n    { id: \"clear\", value: \"AC\" },\n  ];\n\n  const handleClick = (e) => {\n    const btnValue = e.target.dataset.value;\n    let newNumber = \"\";\n\n    if (state.isComplete) {\n      setstate((prevState) => {\n        return { ...prevState, currNumber: \"\" };\n      });\n    }\n\n    if (!isNaN(Number(btnValue))) {\n      setstate((prevState) => {\n        let newExp = \"\";\n        \n        // Checking the Last operations is EQUALS\n        if (lastOperandEquals(prevState)) {\n          newExp = \"\";\n        } else {\n          newExp = prevState.expression;\n        }\n\n        if (\n          prevState.currNumber.length === 1 &&\n          prevState.currNumber[0] === \"0\"\n        ) {\n          newNumber = btnValue;\n        } else {\n          newNumber = prevState.currNumber + btnValue;\n        }\n\n        return {\n          ...prevState,\n          currNumber: newNumber,\n          prevNumber: btnValue,\n          isComplete: false,\n          expression: newExp,\n        };\n      });\n    }\n\n    if (btnValue === \".\" && !state.currNumber.split(\"\").includes(btnValue)) {\n      setstate((prevState) => {\n        return {\n          ...prevState,\n          currNumber: prevState.currNumber + btnValue,\n        };\n      });\n    }\n    if (btnValue === \"AC\") {\n      setstate((prevState) => {\n        return {\n          ...prevState,\n          currNumber: \"0\",\n          prevNumber: \"\",\n          isComplete: true,\n          expression: \"\",\n        };\n      });\n    }\n\n    // OPERATIONS\n    if ([\"+\", \"-\", \"*\", \"/\"].includes(btnValue)) {\n      setstate((prev) => {\n        let newExp = \"\";\n        let operands = \"\";\n\n        if (lastOperandEquals(prev)) {\n          newExp = prev.currNumber;\n        } else {\n          newExp = prev.expression;\n        }\n\n        if ([\"+\", \"-\", \"*\", \"/\"].includes(prev.prevNumber)) {\n          const isOperands = (el) => [\"+\", \"-\", \"*\", \"/\"].includes(el);\n\n          let operandsAlone = prev.expression\n            .replace(/\\s/g, \"\")\n            .slice(-2)\n            .split(\"\");\n\n          if (operandsAlone.every(isOperands)) {\n            console.log(`operandsAlone is True`, operandsAlone);\n\n            let newOperand = prev.expression\n              .trim()\n              .split(\"\")\n              .filter((el) => {\n                return ![\"+\", \"-\", \"*\", \"/\"].includes(el) && /\\S/.test(el);\n              });\n            console.log(`newOperans`, newOperand);\n            newExp = newOperand.join(\"\");\n\n            console.log(`newOperans`, newExp);\n          }\n\n          operands = operands + prev.prevNumber;\n          console.log(`operands`, operands);\n        } else {\n          operands = btnValue;\n        }\n\n        let expression = \"\";\n\n        expression =\n          prev.expression.length === 0\n            ? `${state.currNumber} ${btnValue}`\n            : `${newExp} ${state.currNumber} ${btnValue}`;\n\n        return {\n          ...prev,\n          currNumber: \"\",\n          expression: expression,\n          prevNumber: operands,\n        };\n      });\n    }\n\n    // OUTPUT WHEN EQUALS\n    if (btnValue === \"=\") {\n      let newExp = `${state.expression} ${state.currNumber}`;\n      let calc = eval(newExp).toFixed(4);\n\n      setstate((prev) => {\n        return {\n          ...prev,\n          expression: newExp + btnValue,\n          currNumber: +calc,\n          isComplete: true,\n        };\n      });\n    }\n    console.log(`state`, state);\n  };\n\n  const lastOperandEquals = (obj) =>\n    obj.isComplete && obj.expression.slice(-1) === \"=\";\n\n  return (\n    <div className=\"section-center\">\n      <div className=\"expression\">{state.expression}</div>\n      <div className=\"displayCalc\" id=\"display\">\n        {state.currNumber}\n      </div>\n      <div className=\"container\">\n        {numbers.map((item, index) => {\n          return <Buttons key={index} item={item} handleClick={handleClick} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport \"./Buttons.css\";\r\n\r\nfunction Buttons(props) {\r\n  const { id, value } = props.item;\r\n\r\n  let classNames = \"btns\";\r\n\r\n  if ([\"clear\", \"delete\"].includes(id)) {\r\n    classNames += \" grey-btn\";\r\n  }\r\n  if (id === \"equals\") classNames += \" red-btn\";\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        className={classNames}\r\n        id={id}\r\n        data-value={value}\r\n        onClick={props.handleClick}\r\n      >\r\n        {value}\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}